// Auto-generated shared types
// Generated by contract-sdk-gen

import type { Address, Hash, Hex } from 'viem';

export interface BidAuthorization {
  bid: Bid;
  issuedAt: bigint;
  expiresAt: bigint;
}

export interface ReputationRecord {
  bidId: Hash;
  score: number;
  comment: string;
  tags: number[];
  nonce: Hash;
}

export interface AgentConfig {
  operator: Address;
  active: boolean;
  metadataCallback: string;
  communicationEndpoint: string;
}

export interface Bid {
  offererId: Hash;
  requirements: Requirements;
  payment: Payment;
  timing: Timing;
  status: Status;
}

export interface SettlementDetails {
  bidId: Hash;
  agentId: Hash;
  offererId: Hash;
  agentAmount: bigint;
  offererRefund: bigint;
  feeAmount: bigint;
  microFeeAmount: bigint;
  reputationProvider: Address;
  settlementTime: bigint;
  totalSettled: bigint;
}

export interface ReputationProvider {
  providerAddr: Address;
  fee: bigint;
  algorithmDesc: string;
}

export interface Requirements {
  requireVerified: boolean;
  allowedAttestationRoots: Hash;
  allowedAgentsRoot: Hash;
  minTrustScore: bigint;
}

export interface Payment {
  token: Address;
  amount: bigint;
  authorizationSig: Hex;
}

export interface Timing {
  startTime: bigint;
  endTime: bigint;
  nonce: Hash;
  signature: Hex;
}

export interface Status {
  requestHash: Hash;
  responseHash: Hash;
  completedBy: Hash;
  state: number;
  refundPercent: number;
}
