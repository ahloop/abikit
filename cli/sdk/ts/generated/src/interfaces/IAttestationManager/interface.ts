// Auto-generated interface wrapper for IAttestationManager
// Generated by contract-sdk-gen

import { readContract, writeContract } from 'viem/actions';
import type { PublicClient, WalletClient } from 'viem';
import type { Hash, Address } from 'viem';

import { IATTESTATIONMANAGER_ABI } from './abi';

export interface IAttestationManagerConfig {
  address: Address;
  publicClient?: PublicClient;
  walletClient?: WalletClient;
}

export class IAttestationManager {
  public readonly address: Address;
  private publicClient?: PublicClient;
  private walletClient?: WalletClient;

  constructor(config: IAttestationManagerConfig) {
    this.address = config.address;
    this.publicClient = config.publicClient;
    this.walletClient = config.walletClient;
  }

  /**
   * attestationRootExists
   * view
   */
  async attestationRootExists(rootKey: Hash): Promise<boolean> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: IATTESTATIONMANAGER_ABI,
      functionName: 'attestationRootExists',
      args: [rootKey] as any,
    }) as boolean;
  }

  /**
   * disableRoot
   * nonpayable
   */
  async disableRoot(rootKey: Hash): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: IATTESTATIONMANAGER_ABI,
      functionName: 'disableRoot',
      args: [rootKey] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * enableAttestationRoot
   * nonpayable
   */
  async enableAttestationRoot(rootKey: Hash, initialRoot: Hash): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: IATTESTATIONMANAGER_ABI,
      functionName: 'enableAttestationRoot',
      args: [rootKey, initialRoot] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * getAttestationRoot
   * view
   */
  async getAttestationRoot(rootKey: Hash): Promise<Hash> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: IATTESTATIONMANAGER_ABI,
      functionName: 'getAttestationRoot',
      args: [rootKey] as any,
    }) as Hash;
  }

  /**
   * isAgentAttestationVerified
   * view
   */
  async isAgentAttestationVerified(agentId: Hash): Promise<boolean> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: IATTESTATIONMANAGER_ABI,
      functionName: 'isAgentAttestationVerified',
      args: [agentId] as any,
    }) as boolean;
  }

  /**
   * isSerialVerified
   * view
   */
  async isSerialVerified(serial: Hash): Promise<boolean> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: IATTESTATIONMANAGER_ABI,
      functionName: 'isSerialVerified',
      args: [serial] as any,
    }) as boolean;
  }

  /**
   * validateAndTrackAttestation
   * nonpayable
   */
  async validateAndTrackAttestation(agentId_: Hash, attestationRoot_: Hash, proof_: Hash[]): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: IATTESTATIONMANAGER_ABI,
      functionName: 'validateAndTrackAttestation',
      args: [agentId_, attestationRoot_, proof_] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * Get AttestationRootEnabled event logs
   */
  async getAttestationRootEnabledLogs(options?: {
    fromBlock?: bigint;
    toBlock?: bigint;
    rootKey?: Hash, root?: Hash;
  }): Promise<any[]> {
    if (!this.publicClient) throw new Error('Public client required for reading logs');
    return await this.publicClient.getLogs({
      address: this.address,
      event: IATTESTATIONMANAGER_ABI.find(e => e.type === 'event' && e.name === 'AttestationRootEnabled'),
      fromBlock: options?.fromBlock ?? 0n,
      toBlock: options?.toBlock ?? 'latest',
      args: { rootKey: options?.rootKey, root: options?.root }
    }) as any[];
  }

  /**
   * Get AttestationVerified event logs
   */
  async getAttestationVerifiedLogs(options?: {
    fromBlock?: bigint;
    toBlock?: bigint;
    agentId?: Hash, rootKey?: Hash, serial?: Hash;
  }): Promise<any[]> {
    if (!this.publicClient) throw new Error('Public client required for reading logs');
    return await this.publicClient.getLogs({
      address: this.address,
      event: IATTESTATIONMANAGER_ABI.find(e => e.type === 'event' && e.name === 'AttestationVerified'),
      fromBlock: options?.fromBlock ?? 0n,
      toBlock: options?.toBlock ?? 'latest',
      args: { agentId: options?.agentId, rootKey: options?.rootKey, serial: options?.serial }
    }) as any[];
  }

  /**
   * Watch AttestationRootEnabled events
   */
  watchAttestationRootEnabled(onLogs: (logs: any[]) => void) {
    if (!this.publicClient) throw new Error('Public client required for event watching');
    // Event watching implementation using watchContractEvent
    return this.publicClient.watchContractEvent({
      address: this.address,
      abi: IATTESTATIONMANAGER_ABI,
      eventName: 'AttestationRootEnabled',
      onLogs,
    });
  }

  /**
   * Watch AttestationVerified events
   */
  watchAttestationVerified(onLogs: (logs: any[]) => void) {
    if (!this.publicClient) throw new Error('Public client required for event watching');
    // Event watching implementation using watchContractEvent
    return this.publicClient.watchContractEvent({
      address: this.address,
      abi: IATTESTATIONMANAGER_ABI,
      eventName: 'AttestationVerified',
      onLogs,
    });
  }
}
