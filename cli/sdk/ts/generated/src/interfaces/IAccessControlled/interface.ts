// Auto-generated interface wrapper for IAccessControlled
// Generated by contract-sdk-gen

import { readContract, writeContract } from 'viem/actions';
import type { PublicClient, WalletClient } from 'viem';
import type { Hash, Address } from 'viem';

import { IACCESSCONTROLLED_ABI } from './abi';

export interface IAccessControlledConfig {
  address: Address;
  publicClient?: PublicClient;
  walletClient?: WalletClient;
}

export class IAccessControlled {
  public readonly address: Address;
  private publicClient?: PublicClient;
  private walletClient?: WalletClient;

  constructor(config: IAccessControlledConfig) {
    this.address = config.address;
    this.publicClient = config.publicClient;
    this.walletClient = config.walletClient;
  }

  /**
   * authority
   * view
   */
  async authority(): Promise<Address> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: IACCESSCONTROLLED_ABI,
      functionName: 'authority',
      args: [],
    }) as Address;
  }

  /**
   * changeAuthority
   * nonpayable
   */
  async changeAuthority(_newAuthority: Address): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: IACCESSCONTROLLED_ABI,
      functionName: 'changeAuthority',
      args: [_newAuthority] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * Get AuthorityChanged event logs
   */
  async getAuthorityChangedLogs(options?: {
    fromBlock?: bigint;
    toBlock?: bigint;
    oldAuthority?: Address, newAuthority?: Address;
  }): Promise<any[]> {
    if (!this.publicClient) throw new Error('Public client required for reading logs');
    return await this.publicClient.getLogs({
      address: this.address,
      event: IACCESSCONTROLLED_ABI.find(e => e.type === 'event' && e.name === 'AuthorityChanged'),
      fromBlock: options?.fromBlock ?? 0n,
      toBlock: options?.toBlock ?? 'latest',
      args: { oldAuthority: options?.oldAuthority, newAuthority: options?.newAuthority }
    }) as any[];
  }

  /**
   * Watch AuthorityChanged events
   */
  watchAuthorityChanged(onLogs: (logs: any[]) => void) {
    if (!this.publicClient) throw new Error('Public client required for event watching');
    // Event watching implementation using watchContractEvent
    return this.publicClient.watchContractEvent({
      address: this.address,
      abi: IACCESSCONTROLLED_ABI,
      eventName: 'AuthorityChanged',
      onLogs,
    });
  }
}
