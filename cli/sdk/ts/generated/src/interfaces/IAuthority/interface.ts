// Auto-generated interface wrapper for IAuthority
// Generated by contract-sdk-gen

import { readContract, writeContract } from 'viem/actions';
import type { PublicClient, WalletClient } from 'viem';
import type { Hash, Address } from 'viem';

import { IAUTHORITY_ABI } from './abi';

export interface IAuthorityConfig {
  address: Address;
  publicClient?: PublicClient;
  walletClient?: WalletClient;
}

export class IAuthority {
  public readonly address: Address;
  private publicClient?: PublicClient;
  private walletClient?: WalletClient;

  constructor(config: IAuthorityConfig) {
    this.address = config.address;
    this.publicClient = config.publicClient;
    this.walletClient = config.walletClient;
  }

  /**
   * isRole
   * view
   */
  async isRole(role_: Hash, sender_: Address): Promise<boolean> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: IAUTHORITY_ABI,
      functionName: 'isRole',
      args: [role_, sender_] as any,
    }) as boolean;
  }

  /**
   * operator
   * view
   */
  async operator(): Promise<Address> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: IAUTHORITY_ABI,
      functionName: 'operator',
      args: [],
    }) as Address;
  }

  /**
   * removeRole
   * nonpayable
   */
  async removeRole(role_: Hash, sender_: Address): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: IAUTHORITY_ABI,
      functionName: 'removeRole',
      args: [role_, sender_] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * setRole
   * nonpayable
   */
  async setRole(role_: Hash, sender_: Address): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: IAUTHORITY_ABI,
      functionName: 'setRole',
      args: [role_, sender_] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * transferOwnership
   * nonpayable
   */
  async transferOwnership(newOperator_: Address): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: IAUTHORITY_ABI,
      functionName: 'transferOwnership',
      args: [newOperator_] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * Get OperatorChanged event logs
   */
  async getOperatorChangedLogs(options?: {
    fromBlock?: bigint;
    toBlock?: bigint;
    oldOperator?: Address, newOperator?: Address;
  }): Promise<any[]> {
    if (!this.publicClient) throw new Error('Public client required for reading logs');
    return await this.publicClient.getLogs({
      address: this.address,
      event: IAUTHORITY_ABI.find(e => e.type === 'event' && e.name === 'OperatorChanged'),
      fromBlock: options?.fromBlock ?? 0n,
      toBlock: options?.toBlock ?? 'latest',
      args: { oldOperator: options?.oldOperator, newOperator: options?.newOperator }
    }) as any[];
  }

  /**
   * Watch OperatorChanged events
   */
  watchOperatorChanged(onLogs: (logs: any[]) => void) {
    if (!this.publicClient) throw new Error('Public client required for event watching');
    // Event watching implementation using watchContractEvent
    return this.publicClient.watchContractEvent({
      address: this.address,
      abi: IAUTHORITY_ABI,
      eventName: 'OperatorChanged',
      onLogs,
    });
  }
}
