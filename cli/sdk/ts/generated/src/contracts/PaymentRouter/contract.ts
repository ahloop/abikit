// Auto-generated contract wrapper for PaymentRouter
// Generated by contract-sdk-gen

import { readContract, writeContract } from 'viem/actions';
import type { PublicClient, WalletClient } from 'viem';
import type { Hash, Address, Hex } from 'viem';

import { PAYMENTROUTER_ABI } from './abi';

export interface PaymentRouterConfig {
  address: Address;
  publicClient?: PublicClient;
  walletClient?: WalletClient;
}

export class PaymentRouter {
  public readonly address: Address;
  private publicClient?: PublicClient;
  private walletClient?: WalletClient;

  constructor(config: PaymentRouterConfig) {
    this.address = config.address;
    this.publicClient = config.publicClient;
    this.walletClient = config.walletClient;
  }

  /**
   * authority
   * view
   */
  async authority(): Promise<Address> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'authority',
      args: [],
    }) as Address;
  }

  /**
   * changeAuthority
   * nonpayable
   */
  async changeAuthority(_newAuthority: Address): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'changeAuthority',
      args: [_newAuthority] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * getAmountInMax
   * view
   */
  async getAmountInMax(amountOut: bigint, path: Hex): Promise<bigint> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'getAmountInMax',
      args: [amountOut, path] as any,
    }) as bigint;
  }

  /**
   * getAmountOutMin
   * view
   */
  async getAmountOutMin(amountIn: bigint, path: Hex): Promise<bigint> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'getAmountOutMin',
      args: [amountIn, path] as any,
    }) as bigint;
  }

  /**
   * getNetwork
   * view
   */
  async getNetwork(): Promise<Address> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'getNetwork',
      args: [],
    }) as Address;
  }

  /**
   * getTokenVault
   * view
   */
  async getTokenVault(): Promise<Address> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'getTokenVault',
      args: [],
    }) as Address;
  }

  /**
   * isTokenSupported
   * view
   */
  async isTokenSupported(token: Address): Promise<boolean> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'isTokenSupported',
      args: [token] as any,
    }) as boolean;
  }

  /**
   * maxSwapAmount
   * view
   */
  async maxSwapAmount(): Promise<bigint> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'maxSwapAmount',
      args: [],
    }) as bigint;
  }

  /**
   * microFeeAmount
   * view
   */
  async microFeeAmount(): Promise<bigint> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'microFeeAmount',
      args: [],
    }) as bigint;
  }

  /**
   * minSwapAmount
   * view
   */
  async minSwapAmount(): Promise<bigint> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'minSwapAmount',
      args: [],
    }) as bigint;
  }

  /**
   * network
   * view
   */
  async network(): Promise<Address> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'network',
      args: [],
    }) as Address;
  }

  /**
   * payReputationFee
   * nonpayable
   */
  async payReputationFee(provider: Address, amount: bigint, bidId: Hash): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'payReputationFee',
      args: [provider, amount, bidId] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * priceFeeds
   * view
   */
  async priceFeeds(arg0: Address): Promise<Address> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'priceFeeds',
      args: [arg0] as any,
    }) as Address;
  }

  /**
   * setMaxSwapAmount
   * nonpayable
   */
  async setMaxSwapAmount(_maxSwapAmount: bigint): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'setMaxSwapAmount',
      args: [_maxSwapAmount] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * setMicroFeeAmount
   * nonpayable
   */
  async setMicroFeeAmount(_microFeeAmount: bigint): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'setMicroFeeAmount',
      args: [_microFeeAmount] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * setMinSwapAmount
   * nonpayable
   */
  async setMinSwapAmount(_minSwapAmount: bigint): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'setMinSwapAmount',
      args: [_minSwapAmount] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * setNetwork
   * nonpayable
   */
  async setNetwork(_network: Address): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'setNetwork',
      args: [_network] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * setPriceFeed
   * nonpayable
   */
  async setPriceFeed(token: Address, priceFeed: Address): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'setPriceFeed',
      args: [token, priceFeed] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * setSlippageTolerance
   * nonpayable
   */
  async setSlippageTolerance(_slippageTolerance: number): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'setSlippageTolerance',
      args: [_slippageTolerance] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * setTokenSupported
   * nonpayable
   */
  async setTokenSupported(token: Address, supported: boolean): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'setTokenSupported',
      args: [token, supported] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * setTokenVault
   * nonpayable
   */
  async setTokenVault(_tokenVault: Address): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'setTokenVault',
      args: [_tokenVault] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * settlePayment
   * nonpayable
   */
  async settlePayment(bidId: Hash, recipient: Address, amount: bigint, refundPercent: number, reputationProvider: Address): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'settlePayment',
      args: [bidId, recipient, amount, refundPercent, reputationProvider] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * slippageTolerance
   * view
   */
  async slippageTolerance(): Promise<number> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'slippageTolerance',
      args: [],
    }) as number;
  }

  /**
   * supportedTokens
   * view
   */
  async supportedTokens(arg0: Address): Promise<boolean> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'supportedTokens',
      args: [arg0] as any,
    }) as boolean;
  }

  /**
   * swapExactTokensForTokens
   * nonpayable
   */
  async swapExactTokensForTokens(tokenIn: Address, amountIn: bigint, amountOutMinimum: bigint, path: Hex, deadline: bigint, recipient: Address): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'swapExactTokensForTokens',
      args: [tokenIn, amountIn, amountOutMinimum, path, deadline, recipient] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * swapExactTokensForTokensWithPermit
   * nonpayable
   */
  async swapExactTokensForTokensWithPermit(tokenIn: Address, amountIn: bigint, amountOutMinimum: bigint, path: Hex, deadline: bigint, recipient: Address, permitDeadline: bigint, v: number, r: Hash, s: Hash): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'swapExactTokensForTokensWithPermit',
      args: [tokenIn, amountIn, amountOutMinimum, path, deadline, recipient, permitDeadline, v, r, s] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * swapRouter
   * view
   */
  async swapRouter(): Promise<Address> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'swapRouter',
      args: [],
    }) as Address;
  }

  /**
   * swapTokensForExactTokens
   * nonpayable
   */
  async swapTokensForExactTokens(tokenIn: Address, amountOut: bigint, amountInMaximum: bigint, path: Hex, deadline: bigint, recipient: Address): Promise<Hash> {
    if (!this.walletClient) throw new Error('Wallet client required for write operations');
    if (!this.walletClient.account) throw new Error('Wallet client account required for write operations');
    return await writeContract(this.walletClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'swapTokensForExactTokens',
      args: [tokenIn, amountOut, amountInMaximum, path, deadline, recipient] as any,
      account: this.walletClient.account,
      chain: this.walletClient.chain,
    });
  }

  /**
   * tokenVault
   * view
   */
  async tokenVault(): Promise<Address> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'tokenVault',
      args: [],
    }) as Address;
  }

  /**
   * usdc
   * view
   */
  async usdc(): Promise<Address> {
    if (!this.publicClient) throw new Error('Public client required for read operations');
    return await readContract(this.publicClient, {
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      functionName: 'usdc',
      args: [],
    }) as Address;
  }

  /**
   * Get AuthorityChanged event logs
   */
  async getAuthorityChangedLogs(options?: {
    fromBlock?: bigint;
    toBlock?: bigint;
    oldAuthority?: Address, newAuthority?: Address;
  }): Promise<any[]> {
    if (!this.publicClient) throw new Error('Public client required for reading logs');
    return await this.publicClient.getLogs({
      address: this.address,
      event: PAYMENTROUTER_ABI.find(e => e.type === 'event' && e.name === 'AuthorityChanged'),
      fromBlock: options?.fromBlock ?? 0n,
      toBlock: options?.toBlock ?? 'latest',
      args: { oldAuthority: options?.oldAuthority, newAuthority: options?.newAuthority }
    }) as any[];
  }

  /**
   * Get Initialized event logs
   */
  async getInitializedLogs(options?: {
    fromBlock?: bigint;
    toBlock?: bigint;
    
  }): Promise<any[]> {
    if (!this.publicClient) throw new Error('Public client required for reading logs');
    return await this.publicClient.getLogs({
      address: this.address,
      event: PAYMENTROUTER_ABI.find(e => e.type === 'event' && e.name === 'Initialized'),
      fromBlock: options?.fromBlock ?? 0n,
      toBlock: options?.toBlock ?? 'latest',
      
    }) as any[];
  }

  /**
   * Get PaymentSettled event logs
   */
  async getPaymentSettledLogs(options?: {
    fromBlock?: bigint;
    toBlock?: bigint;
    bidId?: Hash, recipient?: Address;
  }): Promise<any[]> {
    if (!this.publicClient) throw new Error('Public client required for reading logs');
    return await this.publicClient.getLogs({
      address: this.address,
      event: PAYMENTROUTER_ABI.find(e => e.type === 'event' && e.name === 'PaymentSettled'),
      fromBlock: options?.fromBlock ?? 0n,
      toBlock: options?.toBlock ?? 'latest',
      args: { bidId: options?.bidId, recipient: options?.recipient }
    }) as any[];
  }

  /**
   * Get ReputationFeePaid event logs
   */
  async getReputationFeePaidLogs(options?: {
    fromBlock?: bigint;
    toBlock?: bigint;
    provider?: Address, bidId?: Hash;
  }): Promise<any[]> {
    if (!this.publicClient) throw new Error('Public client required for reading logs');
    return await this.publicClient.getLogs({
      address: this.address,
      event: PAYMENTROUTER_ABI.find(e => e.type === 'event' && e.name === 'ReputationFeePaid'),
      fromBlock: options?.fromBlock ?? 0n,
      toBlock: options?.toBlock ?? 'latest',
      args: { provider: options?.provider, bidId: options?.bidId }
    }) as any[];
  }

  /**
   * Get SwapExecuted event logs
   */
  async getSwapExecutedLogs(options?: {
    fromBlock?: bigint;
    toBlock?: bigint;
    tokenIn?: Address, tokenOut?: Address, recipient?: Address;
  }): Promise<any[]> {
    if (!this.publicClient) throw new Error('Public client required for reading logs');
    return await this.publicClient.getLogs({
      address: this.address,
      event: PAYMENTROUTER_ABI.find(e => e.type === 'event' && e.name === 'SwapExecuted'),
      fromBlock: options?.fromBlock ?? 0n,
      toBlock: options?.toBlock ?? 'latest',
      args: { tokenIn: options?.tokenIn, tokenOut: options?.tokenOut, recipient: options?.recipient }
    }) as any[];
  }

  /**
   * Watch AuthorityChanged events
   */
  watchAuthorityChanged(onLogs: (logs: any[]) => void) {
    if (!this.publicClient) throw new Error('Public client required for event watching');
    // Event watching implementation using watchContractEvent
    return this.publicClient.watchContractEvent({
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      eventName: 'AuthorityChanged',
      onLogs,
    });
  }

  /**
   * Watch Initialized events
   */
  watchInitialized(onLogs: (logs: any[]) => void) {
    if (!this.publicClient) throw new Error('Public client required for event watching');
    // Event watching implementation using watchContractEvent
    return this.publicClient.watchContractEvent({
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      eventName: 'Initialized',
      onLogs,
    });
  }

  /**
   * Watch PaymentSettled events
   */
  watchPaymentSettled(onLogs: (logs: any[]) => void) {
    if (!this.publicClient) throw new Error('Public client required for event watching');
    // Event watching implementation using watchContractEvent
    return this.publicClient.watchContractEvent({
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      eventName: 'PaymentSettled',
      onLogs,
    });
  }

  /**
   * Watch ReputationFeePaid events
   */
  watchReputationFeePaid(onLogs: (logs: any[]) => void) {
    if (!this.publicClient) throw new Error('Public client required for event watching');
    // Event watching implementation using watchContractEvent
    return this.publicClient.watchContractEvent({
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      eventName: 'ReputationFeePaid',
      onLogs,
    });
  }

  /**
   * Watch SwapExecuted events
   */
  watchSwapExecuted(onLogs: (logs: any[]) => void) {
    if (!this.publicClient) throw new Error('Public client required for event watching');
    // Event watching implementation using watchContractEvent
    return this.publicClient.watchContractEvent({
      address: this.address,
      abi: PAYMENTROUTER_ABI,
      eventName: 'SwapExecuted',
      onLogs,
    });
  }
}
