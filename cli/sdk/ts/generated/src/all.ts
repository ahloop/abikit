// Comprehensive index - exports everything
// Generated by contract-sdk-gen

// ===== CONTRACT CLASSES =====
export { NetworkCore } from './contracts/NetworkCore';
export { Token } from './contracts/Token';
export { TokenVault } from './contracts/TokenVault';
export { PaymentRouter } from './contracts/PaymentRouter';
export { Registry } from './contracts/Registry';
export { Authority } from './contracts/Authority';

// ===== INTERFACE CLASSES =====
export { INetwork } from './interfaces/INetwork';
export { IToken } from './interfaces/IToken';
export { ITokenVault } from './interfaces/ITokenVault';
export { IPaymentRouter } from './interfaces/IPaymentRouter';
export { IRegistry } from './interfaces/IRegistry';
export { IAuthority } from './interfaces/IAuthority';
export { IReputationManager } from './interfaces/IReputationManager';
export { IBidManager } from './interfaces/IBidManager';
export { IAttestationManager } from './interfaces/IAttestationManager';
export { IAccessControlled } from './interfaces/IAccessControlled';

// ===== CONTRACT CONFIGS =====
export type { NetworkCoreConfig } from './contracts/NetworkCore';
export type { TokenConfig } from './contracts/Token';
export type { TokenVaultConfig } from './contracts/TokenVault';
export type { PaymentRouterConfig } from './contracts/PaymentRouter';
export type { RegistryConfig } from './contracts/Registry';
export type { AuthorityConfig } from './contracts/Authority';

// ===== INTERFACE CONFIGS =====
export type { INetworkConfig } from './interfaces/INetwork';
export type { ITokenConfig } from './interfaces/IToken';
export type { ITokenVaultConfig } from './interfaces/ITokenVault';
export type { IPaymentRouterConfig } from './interfaces/IPaymentRouter';
export type { IRegistryConfig } from './interfaces/IRegistry';
export type { IAuthorityConfig } from './interfaces/IAuthority';
export type { IReputationManagerConfig } from './interfaces/IReputationManager';
export type { IBidManagerConfig } from './interfaces/IBidManager';
export type { IAttestationManagerConfig } from './interfaces/IAttestationManager';
export type { IAccessControlledConfig } from './interfaces/IAccessControlled';

// ===== ABIs =====
export { NETWORKCORE_ABI } from './contracts/NetworkCore';
export { TOKEN_ABI } from './contracts/Token';
export { TOKENVAULT_ABI } from './contracts/TokenVault';
export { PAYMENTROUTER_ABI } from './contracts/PaymentRouter';
export { REGISTRY_ABI } from './contracts/Registry';
export { AUTHORITY_ABI } from './contracts/Authority';
export { INETWORK_ABI } from './interfaces/INetwork';
export { ITOKEN_ABI } from './interfaces/IToken';
export { ITOKENVAULT_ABI } from './interfaces/ITokenVault';
export { IPAYMENTROUTER_ABI } from './interfaces/IPaymentRouter';
export { IREGISTRY_ABI } from './interfaces/IRegistry';
export { IAUTHORITY_ABI } from './interfaces/IAuthority';
export { IREPUTATIONMANAGER_ABI } from './interfaces/IReputationManager';
export { IBIDMANAGER_ABI } from './interfaces/IBidManager';
export { IATTESTATIONMANAGER_ABI } from './interfaces/IAttestationManager';
export { IACCESSCONTROLLED_ABI } from './interfaces/IAccessControlled';

// ===== SHARED TYPES =====
export * from './types';

// ===== UTILITIES =====
// TODO: Add utility exports when implemented

// ===== CONVENIENCE EXPORTS =====
// Import all contracts for convenience objects
import { NetworkCore } from './contracts/NetworkCore';
import { Token } from './contracts/Token';
import { TokenVault } from './contracts/TokenVault';
import { PaymentRouter } from './contracts/PaymentRouter';
import { Registry } from './contracts/Registry';
import { Authority } from './contracts/Authority';
import { INetwork } from './interfaces/INetwork';
import { IToken } from './interfaces/IToken';
import { ITokenVault } from './interfaces/ITokenVault';
import { IPaymentRouter } from './interfaces/IPaymentRouter';
import { IRegistry } from './interfaces/IRegistry';
import { IAuthority } from './interfaces/IAuthority';
import { IReputationManager } from './interfaces/IReputationManager';
import { IBidManager } from './interfaces/IBidManager';
import { IAttestationManager } from './interfaces/IAttestationManager';
import { IAccessControlled } from './interfaces/IAccessControlled';
import { NETWORKCORE_ABI } from './contracts/NetworkCore';
import { TOKEN_ABI } from './contracts/Token';
import { TOKENVAULT_ABI } from './contracts/TokenVault';
import { PAYMENTROUTER_ABI } from './contracts/PaymentRouter';
import { REGISTRY_ABI } from './contracts/Registry';
import { AUTHORITY_ABI } from './contracts/Authority';
import { INETWORK_ABI } from './interfaces/INetwork';
import { ITOKEN_ABI } from './interfaces/IToken';
import { ITOKENVAULT_ABI } from './interfaces/ITokenVault';
import { IPAYMENTROUTER_ABI } from './interfaces/IPaymentRouter';
import { IREGISTRY_ABI } from './interfaces/IRegistry';
import { IAUTHORITY_ABI } from './interfaces/IAuthority';
import { IREPUTATIONMANAGER_ABI } from './interfaces/IReputationManager';
import { IBIDMANAGER_ABI } from './interfaces/IBidManager';
import { IATTESTATIONMANAGER_ABI } from './interfaces/IAttestationManager';
import { IACCESSCONTROLLED_ABI } from './interfaces/IAccessControlled';

// All contracts as a single object
export const CONTRACTS = {
  NetworkCore,
  Token,
  TokenVault,
  PaymentRouter,
  Registry,
  Authority,
} as const;

// All interfaces as a single object  
export const INTERFACES = {
  INetwork,
  IToken,
  ITokenVault,
  IPaymentRouter,
  IRegistry,
  IAuthority,
  IReputationManager,
  IBidManager,
  IAttestationManager,
  IAccessControlled,
} as const;

// All ABIs as a single object
export const ABIS = {
  NETWORKCORE_ABI,
  TOKEN_ABI,
  TOKENVAULT_ABI,
  PAYMENTROUTER_ABI,
  REGISTRY_ABI,
  AUTHORITY_ABI,
  INETWORK_ABI,
  ITOKEN_ABI,
  ITOKENVAULT_ABI,
  IPAYMENTROUTER_ABI,
  IREGISTRY_ABI,
  IAUTHORITY_ABI,
  IREPUTATIONMANAGER_ABI,
  IBIDMANAGER_ABI,
  IATTESTATIONMANAGER_ABI,
  IACCESSCONTROLLED_ABI,
} as const;

// Type helpers
export type ContractName = keyof typeof CONTRACTS;
export type InterfaceName = keyof typeof INTERFACES;
export type ContractClass = typeof CONTRACTS[ContractName];
export type InterfaceClass = typeof INTERFACES[InterfaceName];
