"""
Auto-generated interface wrapper for IToken
Generated by contract-sdk-gen
"""

from typing import Optional
from web3 import Web3
from web3.contract import Contract
from .abi import ABI

class IToken:
    """IToken interface"""
    
    def __init__(self, web3: Web3, address: str):
        self.web3 = web3
        self.address = Web3.to_checksum_address(address)
        self.contract = web3.eth.contract(address=self.address, abi=ABI)

    def d_o_m_a_i_n__s_e_p_a_r_a_t_o_r(self):
        """DOMAIN_SEPARATOR"""
        return self.contract.functions.DOMAIN_SEPARATOR().call()

    def allowance(self, owner: str, spender: str):
        """allowance"""
        return self.contract.functions.allowance(owner, spender).call()

    def approve(self, spender: str, value: int):
        """approve"""
        tx = self.contract.functions.approve(spender, value).transact()
        return tx

    def balance_of(self, account: str):
        """balanceOf"""
        return self.contract.functions.balanceOf(account).call()

    def nonces(self, owner: str):
        """nonces"""
        return self.contract.functions.nonces(owner).call()

    def permit(self, owner: str, spender: str, value: int, deadline: int, v: int, r: bytes, s: bytes):
        """permit"""
        tx = self.contract.functions.permit(owner, spender, value, deadline, v, r, s).transact()
        return tx

    def total_supply(self):
        """totalSupply"""
        return self.contract.functions.totalSupply().call()

    def transfer(self, to: str, value: int):
        """transfer"""
        tx = self.contract.functions.transfer(to, value).transact()
        return tx

    def transfer_from(self, from_param: str, to: str, value: int):
        """transferFrom"""
        tx = self.contract.functions.transferFrom(from_param, to, value).transact()
        return tx
