"""
Auto-generated interface wrapper for IReputationManager
Generated by contract-sdk-gen
"""

from typing import Optional
from web3 import Web3
from web3.contract import Contract
from .abi import ABI

class IReputationManager:
    """IReputationManager interface"""
    
    def __init__(self, web3: Web3, address: str):
        self.web3 = web3
        self.address = Web3.to_checksum_address(address)
        self.contract = web3.eth.contract(address=self.address, abi=ABI)

    def get_agent_rating_count(self, agent_id_: bytes):
        """getAgentRatingCount"""
        return self.contract.functions.getAgentRatingCount(agent_id_).call()

    def get_agent_rating_data(self, agent_id_: bytes):
        """getAgentRatingData"""
        return self.contract.functions.getAgentRatingData(agent_id_).call()

    def get_agent_reputation_score(self, agent_id_: bytes):
        """getAgentReputationScore"""
        return self.contract.functions.getAgentReputationScore(agent_id_).call()

    def get_agent_reputation_score_with_tags(self, agent_id_: bytes, tags_: list[str]):
        """getAgentReputationScoreWithTags"""
        return self.contract.functions.getAgentReputationScoreWithTags(agent_id_, tags_).call()

    def get_bid_rating(self, bid_id_: bytes):
        """getBidRating"""
        return self.contract.functions.getBidRating(bid_id_).call()

    def is_bid_rated(self, bid_id_: bytes):
        """isBidRated"""
        return self.contract.functions.isBidRated(bid_id_).call()

    def resolve_with_proof(self, proof: bytes, original_calldata: bytes):
        """resolveWithProof"""
        return self.contract.functions.resolveWithProof(proof, original_calldata).call()

    def set_reputation_provider(self, agent_id_: bytes, provider_: str):
        """setReputationProvider"""
        tx = self.contract.functions.setReputationProvider(agent_id_, provider_).transact()
        return tx

    def submit_detailed_rating(self, bid_id_: bytes, agent_id_: bytes, score: int, comment: str, tags: list[int]):
        """submitDetailedRating"""
        tx = self.contract.functions.submitDetailedRating(bid_id_, agent_id_, score, comment, tags).transact()
        return tx

    def submit_rating(self, bid_id_: bytes, agent_id_: bytes, score: int, comment: str):
        """submitRating"""
        tx = self.contract.functions.submitRating(bid_id_, agent_id_, score, comment).transact()
        return tx
