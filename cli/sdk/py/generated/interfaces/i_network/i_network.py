"""
Auto-generated interface wrapper for INetwork
Generated by contract-sdk-gen
"""

from typing import Optional
from web3 import Web3
from web3.contract import Contract
from .abi import ABI

class INetwork:
    """INetwork interface"""
    
    def __init__(self, web3: Web3, address: str):
        self.web3 = web3
        self.address = Web3.to_checksum_address(address)
        self.contract = web3.eth.contract(address=self.address, abi=ABI)

    def accept_bid(self, bid_id: bytes, signature: bytes, result_hash: bytes):
        """acceptBid"""
        tx = self.contract.functions.acceptBid(bid_id, signature, result_hash).transact()
        return tx

    def audit_bid(self, bid_id: bytes, valid: bool, refund_percent: int):
        """auditBid"""
        tx = self.contract.functions.auditBid(bid_id, valid, refund_percent).transact()
        return tx

    def cancel_bid(self, bid_id: bytes):
        """cancelBid"""
        tx = self.contract.functions.cancelBid(bid_id).transact()
        return tx

    def complete_bid(self, bid_id: bytes, response_hash: bytes):
        """completeBid"""
        tx = self.contract.functions.completeBid(bid_id, response_hash).transact()
        return tx

    def get_module_addresses(self):
        """getModuleAddresses"""
        return self.contract.functions.getModuleAddresses().call()

    def get_pending_bid_at(self, agent_id: bytes, index: int):
        """getPendingBidAt"""
        return self.contract.functions.getPendingBidAt(agent_id, index).call()

    def get_pending_bids_count(self, agent_id: bytes):
        """getPendingBidsCount"""
        return self.contract.functions.getPendingBidsCount(agent_id).call()

    def initialize_modules(self, token_vault: str, payment_router: str, bid_manager: str, agent_manager: str, attestation_manager: str, settlement_manager: str, reputation_manager: str):
        """initializeModules"""
        tx = self.contract.functions.initializeModules(token_vault, payment_router, bid_manager, agent_manager, attestation_manager, settlement_manager, reputation_manager).transact()
        return tx

    def is_agent_verified(self, agent_id: bytes):
        """isAgentVerified"""
        return self.contract.functions.isAgentVerified(agent_id).call()

    def is_modules_initialized(self):
        """isModulesInitialized"""
        return self.contract.functions.isModulesInitialized().call()

    def payment_router(self):
        """paymentRouter"""
        return self.contract.functions.paymentRouter().call()

    def post_manual_bid(self, bid_authorization: 'BidAuthorization', v: int, r: bytes, s: bytes):
        """postManualBid"""
        tx = self.contract.functions.postManualBid(bid_authorization, v, r, s).transact()
        return tx

    def rate_bid(self, bid_id: bytes, positive: bool, review_hash: bytes):
        """rateBid"""
        tx = self.contract.functions.rateBid(bid_id, positive, review_hash).transact()
        return tx

    def register_agent(self, agent_id: bytes, metadata_callback: str, communication_endpoint: str):
        """registerAgent"""
        tx = self.contract.functions.registerAgent(agent_id, metadata_callback, communication_endpoint).transact()
        return tx

    def registry(self):
        """registry"""
        return self.contract.functions.registry().call()

    def set_agent_manager(self, agent_manager: str):
        """setAgentManager"""
        tx = self.contract.functions.setAgentManager(agent_manager).transact()
        return tx

    def set_attestation_manager(self, attestation_manager: str):
        """setAttestationManager"""
        tx = self.contract.functions.setAttestationManager(attestation_manager).transact()
        return tx

    def set_bid_manager(self, bid_manager: str):
        """setBidManager"""
        tx = self.contract.functions.setBidManager(bid_manager).transact()
        return tx

    def set_dispute_window(self, dispute_window: int):
        """setDisputeWindow"""
        tx = self.contract.functions.setDisputeWindow(dispute_window).transact()
        return tx

    def set_payment_router(self, payment_router: str):
        """setPaymentRouter"""
        tx = self.contract.functions.setPaymentRouter(payment_router).transact()
        return tx

    def set_registry(self, registry: str):
        """setRegistry"""
        tx = self.contract.functions.setRegistry(registry).transact()
        return tx

    def set_token_vault(self, token_vault: str):
        """setTokenVault"""
        tx = self.contract.functions.setTokenVault(token_vault).transact()
        return tx

    def settle_bid(self, bid_id: bytes, reputation_provider: str):
        """settleBid"""
        tx = self.contract.functions.settleBid(bid_id, reputation_provider).transact()
        return tx

    def token_vault(self):
        """tokenVault"""
        return self.contract.functions.tokenVault().call()

    def usdc(self):
        """usdc"""
        return self.contract.functions.usdc().call()
