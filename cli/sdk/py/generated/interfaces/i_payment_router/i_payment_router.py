"""
Auto-generated interface wrapper for IPaymentRouter
Generated by contract-sdk-gen
"""

from typing import Optional
from web3 import Web3
from web3.contract import Contract
from .abi import ABI

class IPaymentRouter:
    """IPaymentRouter interface"""
    
    def __init__(self, web3: Web3, address: str):
        self.web3 = web3
        self.address = Web3.to_checksum_address(address)
        self.contract = web3.eth.contract(address=self.address, abi=ABI)

    def get_amount_in_max(self, amount_out: int, path: bytes):
        """getAmountInMax"""
        return self.contract.functions.getAmountInMax(amount_out, path).call()

    def get_amount_out_min(self, amount_in: int, path: bytes):
        """getAmountOutMin"""
        return self.contract.functions.getAmountOutMin(amount_in, path).call()

    def is_token_supported(self, token: str):
        """isTokenSupported"""
        return self.contract.functions.isTokenSupported(token).call()

    def network(self):
        """network"""
        return self.contract.functions.network().call()

    def pay_reputation_fee(self, provider: str, amount: int, bid_id: bytes):
        """payReputationFee"""
        tx = self.contract.functions.payReputationFee(provider, amount, bid_id).transact()
        return tx

    def set_max_swap_amount(self, max_swap_amount: int):
        """setMaxSwapAmount"""
        tx = self.contract.functions.setMaxSwapAmount(max_swap_amount).transact()
        return tx

    def set_min_swap_amount(self, min_swap_amount: int):
        """setMinSwapAmount"""
        tx = self.contract.functions.setMinSwapAmount(min_swap_amount).transact()
        return tx

    def set_network(self, network: str):
        """setNetwork"""
        tx = self.contract.functions.setNetwork(network).transact()
        return tx

    def set_slippage_tolerance(self, slippage_tolerance: int):
        """setSlippageTolerance"""
        tx = self.contract.functions.setSlippageTolerance(slippage_tolerance).transact()
        return tx

    def set_token_vault(self, token_vault: str):
        """setTokenVault"""
        tx = self.contract.functions.setTokenVault(token_vault).transact()
        return tx

    def settle_payment(self, bid_id: bytes, recipient: str, amount: int, refund_percent: int, reputation_provider: str):
        """settlePayment"""
        tx = self.contract.functions.settlePayment(bid_id, recipient, amount, refund_percent, reputation_provider).transact()
        return tx

    def swap_exact_tokens_for_tokens(self, token_in: str, amount_in: int, amount_out_minimum: int, path: bytes, deadline: int, recipient: str):
        """swapExactTokensForTokens"""
        tx = self.contract.functions.swapExactTokensForTokens(token_in, amount_in, amount_out_minimum, path, deadline, recipient).transact()
        return tx

    def swap_exact_tokens_for_tokens_with_permit(self, token_in: str, amount_in: int, amount_out_minimum: int, path: bytes, deadline: int, recipient: str, permit_deadline: int, v: int, r: bytes, s: bytes):
        """swapExactTokensForTokensWithPermit"""
        tx = self.contract.functions.swapExactTokensForTokensWithPermit(token_in, amount_in, amount_out_minimum, path, deadline, recipient, permit_deadline, v, r, s).transact()
        return tx

    def swap_router(self):
        """swapRouter"""
        return self.contract.functions.swapRouter().call()

    def swap_tokens_for_exact_tokens(self, token_in: str, amount_out: int, amount_in_maximum: int, path: bytes, deadline: int, recipient: str):
        """swapTokensForExactTokens"""
        tx = self.contract.functions.swapTokensForExactTokens(token_in, amount_out, amount_in_maximum, path, deadline, recipient).transact()
        return tx

    def token_vault(self):
        """tokenVault"""
        return self.contract.functions.tokenVault().call()

    def usdc(self):
        """usdc"""
        return self.contract.functions.usdc().call()
