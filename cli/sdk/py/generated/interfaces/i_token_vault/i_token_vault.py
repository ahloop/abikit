"""
Auto-generated interface wrapper for ITokenVault
Generated by contract-sdk-gen
"""

from typing import Optional
from web3 import Web3
from web3.contract import Contract
from .abi import ABI

class ITokenVault:
    """ITokenVault interface"""
    
    def __init__(self, web3: Web3, address: str):
        self.web3 = web3
        self.address = Web3.to_checksum_address(address)
        self.contract = web3.eth.contract(address=self.address, abi=ABI)

    def allowance(self, owner: str, spender: str):
        """allowance"""
        return self.contract.functions.allowance(owner, spender).call()

    def apply_negative_fee(self, bid_id: bytes, amount: int):
        """applyNegativeFee"""
        tx = self.contract.functions.applyNegativeFee(bid_id, amount).transact()
        return tx

    def approve(self, spender: str, value: int):
        """approve"""
        tx = self.contract.functions.approve(spender, value).transact()
        return tx

    def asset(self):
        """asset"""
        return self.contract.functions.asset().call()

    def balance_of(self, account: str):
        """balanceOf"""
        return self.contract.functions.balanceOf(account).call()

    def collect_fees(self, from_param: str, amount: int):
        """collectFees"""
        tx = self.contract.functions.collectFees(from_param, amount).transact()
        return tx

    def collect_fees_with_micro_fee(self, from_param: str, amount: int, reputation_provider: str, bid_id: bytes):
        """collectFeesWithMicroFee"""
        tx = self.contract.functions.collectFeesWithMicroFee(from_param, amount, reputation_provider, bid_id).transact()
        return tx

    def convert_to_assets(self, shares: int):
        """convertToAssets"""
        return self.contract.functions.convertToAssets(shares).call()

    def convert_to_shares(self, assets: int):
        """convertToShares"""
        return self.contract.functions.convertToShares(assets).call()

    def decimals(self):
        """decimals"""
        return self.contract.functions.decimals().call()

    def deposit(self, assets: int, receiver: str):
        """deposit"""
        tx = self.contract.functions.deposit(assets, receiver).transact()
        return tx

    def get_fee_amount(self, amount: int):
        """getFeeAmount"""
        return self.contract.functions.getFeeAmount(amount).call()

    def get_max_fee_rate(self):
        """getMaxFeeRate"""
        return self.contract.functions.getMaxFeeRate().call()

    def get_max_negative_fee_rate(self):
        """getMaxNegativeFeeRate"""
        return self.contract.functions.getMaxNegativeFeeRate().call()

    def get_negative_fee_amount(self, amount: int):
        """getNegativeFeeAmount"""
        return self.contract.functions.getNegativeFeeAmount(amount).call()

    def get_reputation_provider_fee_balance(self, provider: str):
        """getReputationProviderFeeBalance"""
        return self.contract.functions.getReputationProviderFeeBalance(provider).call()

    def get_sponsored_bid_balance(self):
        """getSponsoredBidBalance"""
        return self.contract.functions.getSponsoredBidBalance().call()

    def get_sponsored_bid_subsidy(self, bid_id: bytes):
        """getSponsoredBidSubsidy"""
        return self.contract.functions.getSponsoredBidSubsidy(bid_id).call()

    def get_treasury_balance(self):
        """getTreasuryBalance"""
        return self.contract.functions.getTreasuryBalance().call()

    def initialize_treasury(self, token: str):
        """initializeTreasury"""
        tx = self.contract.functions.initializeTreasury(token).transact()
        return tx

    def is_initialized(self):
        """isInitialized"""
        return self.contract.functions.isInitialized().call()

    def max_deposit(self, receiver: str):
        """maxDeposit"""
        return self.contract.functions.maxDeposit(receiver).call()

    def max_mint(self, receiver: str):
        """maxMint"""
        return self.contract.functions.maxMint(receiver).call()

    def max_redeem(self, owner: str):
        """maxRedeem"""
        return self.contract.functions.maxRedeem(owner).call()

    def max_withdraw(self, owner: str):
        """maxWithdraw"""
        return self.contract.functions.maxWithdraw(owner).call()

    def mint(self, shares: int, receiver: str):
        """mint"""
        tx = self.contract.functions.mint(shares, receiver).transact()
        return tx

    def name(self):
        """name"""
        return self.contract.functions.name().call()

    def preview_deposit(self, assets: int):
        """previewDeposit"""
        return self.contract.functions.previewDeposit(assets).call()

    def preview_mint(self, shares: int):
        """previewMint"""
        return self.contract.functions.previewMint(shares).call()

    def preview_redeem(self, shares: int):
        """previewRedeem"""
        return self.contract.functions.previewRedeem(shares).call()

    def preview_withdraw(self, assets: int):
        """previewWithdraw"""
        return self.contract.functions.previewWithdraw(assets).call()

    def redeem(self, shares: int, receiver: str, owner: str):
        """redeem"""
        tx = self.contract.functions.redeem(shares, receiver, owner).transact()
        return tx

    def set_fee_rate(self, fee_rate: int):
        """setFeeRate"""
        tx = self.contract.functions.setFeeRate(fee_rate).transact()
        return tx

    def set_micro_fee_amount(self, micro_fee_amount: int):
        """setMicroFeeAmount"""
        tx = self.contract.functions.setMicroFeeAmount(micro_fee_amount).transact()
        return tx

    def set_negative_fee_rate(self, negative_fee_rate: any):
        """setNegativeFeeRate"""
        tx = self.contract.functions.setNegativeFeeRate(negative_fee_rate).transact()
        return tx

    def sponsor_bid(self, bid_id: bytes, subsidy_amount: int):
        """sponsorBid"""
        tx = self.contract.functions.sponsorBid(bid_id, subsidy_amount).transact()
        return tx

    def symbol(self):
        """symbol"""
        return self.contract.functions.symbol().call()

    def total_assets(self):
        """totalAssets"""
        return self.contract.functions.totalAssets().call()

    def total_supply(self):
        """totalSupply"""
        return self.contract.functions.totalSupply().call()

    def transfer(self, to: str, value: int):
        """transfer"""
        tx = self.contract.functions.transfer(to, value).transact()
        return tx

    def transfer_from(self, from_param: str, to: str, value: int):
        """transferFrom"""
        tx = self.contract.functions.transferFrom(from_param, to, value).transact()
        return tx

    def withdraw(self, assets: int, receiver: str, owner: str):
        """withdraw"""
        tx = self.contract.functions.withdraw(assets, receiver, owner).transact()
        return tx

    def withdraw_reputation_provider_fees(self, amount: int):
        """withdrawReputationProviderFees"""
        tx = self.contract.functions.withdrawReputationProviderFees(amount).transact()
        return tx

    def withdraw_treasury(self, to: str, amount: int):
        """withdrawTreasury"""
        tx = self.contract.functions.withdrawTreasury(to, amount).transact()
        return tx
