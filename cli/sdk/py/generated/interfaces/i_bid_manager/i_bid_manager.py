"""
Auto-generated interface wrapper for IBidManager
Generated by contract-sdk-gen
"""

from typing import Optional
from web3 import Web3
from web3.contract import Contract
from .abi import ABI

class IBidManager:
    """IBidManager interface"""
    
    def __init__(self, web3: Web3, address: str):
        self.web3 = web3
        self.address = Web3.to_checksum_address(address)
        self.contract = web3.eth.contract(address=self.address, abi=ABI)

    def accept_bid(self, bid_id: bytes, signature: bytes, result_hash: bytes, allowed_agents_proof: list[bytes]):
        """acceptBid"""
        tx = self.contract.functions.acceptBid(bid_id, signature, result_hash, allowed_agents_proof).transact()
        return tx

    def audit_bid(self, bid_id: bytes, valid: bool, refund_percent: int):
        """auditBid"""
        tx = self.contract.functions.auditBid(bid_id, valid, refund_percent).transact()
        return tx

    def bid_exists(self, bid_id: bytes):
        """bidExists"""
        return self.contract.functions.bidExists(bid_id).call()

    def cancel_bid(self, bid_id: bytes):
        """cancelBid"""
        tx = self.contract.functions.cancelBid(bid_id).transact()
        return tx

    def check_bid_expirations(self, bid_ids: list[bytes]):
        """checkBidExpirations"""
        tx = self.contract.functions.checkBidExpirations(bid_ids).transact()
        return tx

    def complete_bid(self, bid_id: bytes, response_hash: bytes):
        """completeBid"""
        tx = self.contract.functions.completeBid(bid_id, response_hash).transact()
        return tx

    def dispute_settlement(self, bid_id: bytes, reason: str):
        """disputeSettlement"""
        tx = self.contract.functions.disputeSettlement(bid_id, reason).transact()
        return tx

    def finalize_settlement(self, bid_id: bytes):
        """finalizeSettlement"""
        tx = self.contract.functions.finalizeSettlement(bid_id).transact()
        return tx

    def get_agent_total_settlements(self, agent_id: bytes):
        """getAgentTotalSettlements"""
        return self.contract.functions.getAgentTotalSettlements(agent_id).call()

    def get_bid(self, bid_id: bytes):
        """getBid"""
        return self.contract.functions.getBid(bid_id).call()

    def get_bid_expiration_time(self, bid_id: bytes):
        """getBidExpirationTime"""
        return self.contract.functions.getBidExpirationTime(bid_id).call()

    def get_bid_state(self, bid_id: bytes):
        """getBidState"""
        return self.contract.functions.getBidState(bid_id).call()

    def get_dispute_details(self, bid_id: bytes):
        """getDisputeDetails"""
        return self.contract.functions.getDisputeDetails(bid_id).call()

    def get_dispute_window(self):
        """getDisputeWindow"""
        return self.contract.functions.getDisputeWindow().call()

    def get_min_trust_score(self):
        """getMinTrustScore"""
        return self.contract.functions.getMinTrustScore().call()

    def get_offerer_active_bid_at(self, offerer_id: bytes, index: int):
        """getOffererActiveBidAt"""
        return self.contract.functions.getOffererActiveBidAt(offerer_id, index).call()

    def get_offerer_active_bids_count(self, offerer_id: bytes):
        """getOffererActiveBidsCount"""
        return self.contract.functions.getOffererActiveBidsCount(offerer_id).call()

    def get_offerer_total_settlements(self, offerer_id: bytes):
        """getOffererTotalSettlements"""
        return self.contract.functions.getOffererTotalSettlements(offerer_id).call()

    def get_pending_bid_at(self, agent_id: bytes, index: int):
        """getPendingBidAt"""
        return self.contract.functions.getPendingBidAt(agent_id, index).call()

    def get_pending_bids_count(self, agent_id: bytes):
        """getPendingBidsCount"""
        return self.contract.functions.getPendingBidsCount(agent_id).call()

    def get_rating_details(self, bid_id: bytes):
        """getRatingDetails"""
        return self.contract.functions.getRatingDetails(bid_id).call()

    def get_score(self, agent_id: bytes, provider: str):
        """getScore"""
        return self.contract.functions.getScore(agent_id, provider).call()

    def get_settlement(self, bid_id: bytes):
        """getSettlement"""
        return self.contract.functions.getSettlement(bid_id).call()

    def get_total_settled(self):
        """getTotalSettled"""
        return self.contract.functions.getTotalSettled().call()

    def is_bid_cancelled(self, bid_id: bytes):
        """isBidCancelled"""
        return self.contract.functions.isBidCancelled(bid_id).call()

    def is_bid_expired(self, bid_id: bytes):
        """isBidExpired"""
        return self.contract.functions.isBidExpired(bid_id).call()

    def is_nonce_used(self, nonce: bytes):
        """isNonceUsed"""
        return self.contract.functions.isNonceUsed(nonce).call()

    def post_manual_bid(self, bid_authorization: 'BidAuthorization', v: int, r: bytes, s: bytes):
        """postManualBid"""
        tx = self.contract.functions.postManualBid(bid_authorization, v, r, s).transact()
        return tx

    def process_refund(self, bid_id: bytes, valid: bool, refund_percent: int):
        """processRefund"""
        tx = self.contract.functions.processRefund(bid_id, valid, refund_percent).transact()
        return tx

    def rate_bid(self, bid_id: bytes, positive: bool, review_hash: bytes):
        """rateBid"""
        tx = self.contract.functions.rateBid(bid_id, positive, review_hash).transact()
        return tx

    def register_reputation_provider(self, provider: 'ReputationProvider'):
        """registerReputationProvider"""
        tx = self.contract.functions.registerReputationProvider(provider).transact()
        return tx

    def set_attestation_manager(self, attestation_manager: str):
        """setAttestationManager"""
        tx = self.contract.functions.setAttestationManager(attestation_manager).transact()
        return tx

    def set_dispute_window(self, dispute_window: int):
        """setDisputeWindow"""
        tx = self.contract.functions.setDisputeWindow(dispute_window).transact()
        return tx

    def set_min_trust_score(self, min_trust_score: int):
        """setMinTrustScore"""
        tx = self.contract.functions.setMinTrustScore(min_trust_score).transact()
        return tx

    def set_network(self, network: str):
        """setNetwork"""
        tx = self.contract.functions.setNetwork(network).transact()
        return tx

    def set_reputation_manager(self, reputation_manager: str):
        """setReputationManager"""
        tx = self.contract.functions.setReputationManager(reputation_manager).transact()
        return tx

    def set_token_vault(self, token_vault: str):
        """setTokenVault"""
        tx = self.contract.functions.setTokenVault(token_vault).transact()
        return tx

    def settle_bid(self, bid_id: bytes, reputation_provider: str):
        """settleBid"""
        tx = self.contract.functions.settleBid(bid_id, reputation_provider).transact()
        return tx

    def submit_rating(self, signature: bytes, record: 'ReputationRecord'):
        """submitRating"""
        tx = self.contract.functions.submitRating(signature, record).transact()
        return tx
