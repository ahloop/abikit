"""
Auto-generated interface wrapper for IAttestationManager
Generated by contract-sdk-gen
"""

from typing import Optional
from web3 import Web3
from web3.contract import Contract
from .abi import ABI

class IAttestationManager:
    """IAttestationManager interface"""
    
    def __init__(self, web3: Web3, address: str):
        self.web3 = web3
        self.address = Web3.to_checksum_address(address)
        self.contract = web3.eth.contract(address=self.address, abi=ABI)

    def attestation_root_exists(self, root_key: bytes):
        """attestationRootExists"""
        return self.contract.functions.attestationRootExists(root_key).call()

    def disable_root(self, root_key: bytes):
        """disableRoot"""
        tx = self.contract.functions.disableRoot(root_key).transact()
        return tx

    def enable_attestation_root(self, root_key: bytes, initial_root: bytes):
        """enableAttestationRoot"""
        tx = self.contract.functions.enableAttestationRoot(root_key, initial_root).transact()
        return tx

    def get_attestation_root(self, root_key: bytes):
        """getAttestationRoot"""
        return self.contract.functions.getAttestationRoot(root_key).call()

    def is_agent_attestation_verified(self, agent_id: bytes):
        """isAgentAttestationVerified"""
        return self.contract.functions.isAgentAttestationVerified(agent_id).call()

    def is_serial_verified(self, serial: bytes):
        """isSerialVerified"""
        return self.contract.functions.isSerialVerified(serial).call()

    def validate_and_track_attestation(self, agent_id_: bytes, attestation_root_: bytes, proof_: list[bytes]):
        """validateAndTrackAttestation"""
        tx = self.contract.functions.validateAndTrackAttestation(agent_id_, attestation_root_, proof_).transact()
        return tx
