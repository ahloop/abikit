"""
Auto-generated contract addresses by network
Generated by contract-sdk-gen
"""

from typing import Dict, Optional, TypedDict


class NetworkAddresses(TypedDict, total=False):
    Authority: Optional[str]
    NetworkCore: Optional[str]
    PaymentRouter: Optional[str]
    Registry: Optional[str]
    Token: Optional[str]
    TokenVault: Optional[str]


class NetworkContracts(TypedDict):
    localhost: NetworkAddresses
    base_sepolia: NetworkAddresses
    base: NetworkAddresses


NETWORK_CONTRACTS: NetworkContracts = {
    'localhost': {
        'Authority': '0x5FC8d32690cc91D4c39d9d3abcBD16989F875707',
        'NetworkCore': '0x5FbDB2315678afecb367f032d93F642f64180aa3',
        'PaymentRouter': '0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9',
        'Registry': '0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9',
        'Token': '0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512',
        'TokenVault': '0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0'
    },
    'base_sepolia': {
        'Authority': '0x0000000000000000000000000000000000000000',
        'NetworkCore': '0x0000000000000000000000000000000000000000',
        'PaymentRouter': '0x0000000000000000000000000000000000000000',
        'Registry': '0x0000000000000000000000000000000000000000',
        'Token': '0x0000000000000000000000000000000000000000',
        'TokenVault': '0x0000000000000000000000000000000000000000'
    },
    'base': {
        'Authority': '0x0000000000000000000000000000000000000000',
        'NetworkCore': '0x0000000000000000000000000000000000000000',
        'PaymentRouter': '0x0000000000000000000000000000000000000000',
        'Registry': '0x0000000000000000000000000000000000000000',
        'Token': '0x0000000000000000000000000000000000000000',
        'TokenVault': '0x0000000000000000000000000000000000000000'
    }
}


def get_contract_address(network: str, contract: str) -> str:
    """Get contract address by network and contract name"""
    if network not in NETWORK_CONTRACTS:
        raise ValueError(f'Network {network} not found')
    
    address = NETWORK_CONTRACTS[network].get(contract)
    if not address:
        raise ValueError(f'Contract {contract} not found for network {network}')
    
    return address


def get_available_networks() -> list[str]:
    """Get all available networks"""
    return list(NETWORK_CONTRACTS.keys())


def get_network_contracts(network: str) -> NetworkAddresses:
    """Get all contracts for a network"""
    if network not in NETWORK_CONTRACTS:
        raise ValueError(f'Network {network} not found')
    
    return NETWORK_CONTRACTS[network]
