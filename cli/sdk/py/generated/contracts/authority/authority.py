"""
Auto-generated contract wrapper for Authority
Generated by contract-sdk-gen
"""

from typing import Optional
from web3 import Web3
from web3.contract import Contract
from .abi import ABI

class Authority:
    """Authority contract"""
    
    def __init__(self, web3: Web3, address: str):
        self.web3 = web3
        self.address = Web3.to_checksum_address(address)
        self.contract = web3.eth.contract(address=self.address, abi=ABI)

    def b_a_s_e__r_o_l_e(self):
        """BASE_ROLE"""
        return self.contract.functions.BASE_ROLE().call()

    def d_e_f_a_u_l_t__a_d_m_i_n__r_o_l_e(self):
        """DEFAULT_ADMIN_ROLE"""
        return self.contract.functions.DEFAULT_ADMIN_ROLE().call()

    def authority(self):
        """authority"""
        return self.contract.functions.authority().call()

    def change_authority(self, new_authority: str):
        """changeAuthority"""
        tx = self.contract.functions.changeAuthority(new_authority).transact()
        return tx

    def get_role_admin(self, role: bytes):
        """getRoleAdmin"""
        return self.contract.functions.getRoleAdmin(role).call()

    def get_role_hash(self, role_: int):
        """getRoleHash"""
        return self.contract.functions.getRoleHash(role_).call()

    def get_role_member(self, role: bytes, index: int):
        """getRoleMember"""
        return self.contract.functions.getRoleMember(role, index).call()

    def get_role_member_count(self, role: bytes):
        """getRoleMemberCount"""
        return self.contract.functions.getRoleMemberCount(role).call()

    def get_role_members(self, role: bytes):
        """getRoleMembers"""
        return self.contract.functions.getRoleMembers(role).call()

    def grant_role(self, role: bytes, account: str):
        """grantRole"""
        tx = self.contract.functions.grantRole(role, account).transact()
        return tx

    def has_role(self, role: bytes, account: str):
        """hasRole"""
        return self.contract.functions.hasRole(role, account).call()

    def is_role(self, role_: bytes, sender_: str):
        """isRole"""
        return self.contract.functions.isRole(role_, sender_).call()

    def operator(self):
        """operator"""
        return self.contract.functions.operator().call()

    def remove_role(self, role_: bytes, sender_: str):
        """removeRole"""
        tx = self.contract.functions.removeRole(role_, sender_).transact()
        return tx

    def renounce_role(self, role: bytes, caller_confirmation: str):
        """renounceRole"""
        tx = self.contract.functions.renounceRole(role, caller_confirmation).transact()
        return tx

    def revoke_role(self, role: bytes, account: str):
        """revokeRole"""
        tx = self.contract.functions.revokeRole(role, account).transact()
        return tx

    def set_role(self, role_: bytes, sender_: str):
        """setRole"""
        tx = self.contract.functions.setRole(role_, sender_).transact()
        return tx

    def supports_interface(self, interface_id: any):
        """supportsInterface"""
        return self.contract.functions.supportsInterface(interface_id).call()

    def transfer_ownership(self, new_operator_: str):
        """transferOwnership"""
        tx = self.contract.functions.transferOwnership(new_operator_).transact()
        return tx
