"""
Auto-generated contract wrapper for Registry
Generated by contract-sdk-gen
"""

from typing import Optional
from web3 import Web3
from web3.contract import Contract
from .abi import ABI

class Registry:
    """Registry contract"""
    
    def __init__(self, web3: Web3, address: str):
        self.web3 = web3
        self.address = Web3.to_checksum_address(address)
        self.contract = web3.eth.contract(address=self.address, abi=ABI)

    def attestation_root_exists(self, root_key: bytes):
        """attestationRootExists"""
        return self.contract.functions.attestationRootExists(root_key).call()

    def authority(self):
        """authority"""
        return self.contract.functions.authority().call()

    def change_authority(self, new_authority: str):
        """changeAuthority"""
        tx = self.contract.functions.changeAuthority(new_authority).transact()
        return tx

    def disable_agent(self, agent_id_: bytes):
        """disableAgent"""
        tx = self.contract.functions.disableAgent(agent_id_).transact()
        return tx

    def disable_root(self, root_key: bytes):
        """disableRoot"""
        tx = self.contract.functions.disableRoot(root_key).transact()
        return tx

    def enable_attestation_root(self, root_key: bytes, initial_root: bytes):
        """enableAttestationRoot"""
        tx = self.contract.functions.enableAttestationRoot(root_key, initial_root).transact()
        return tx

    def get_agent(self, agent_id_: bytes):
        """getAgent"""
        return self.contract.functions.getAgent(agent_id_).call()

    def get_agent_owner(self, agent_id_: bytes):
        """getAgentOwner"""
        return self.contract.functions.getAgentOwner(agent_id_).call()

    def get_agent_rating_count(self, agent_id_: bytes):
        """getAgentRatingCount"""
        return self.contract.functions.getAgentRatingCount(agent_id_).call()

    def get_agent_rating_data(self, agent_id_: bytes):
        """getAgentRatingData"""
        return self.contract.functions.getAgentRatingData(agent_id_).call()

    def get_agent_reputation_score(self, agent_id_: bytes):
        """getAgentReputationScore"""
        return self.contract.functions.getAgentReputationScore(agent_id_).call()

    def get_attestation_root(self, root_key: bytes):
        """getAttestationRoot"""
        return self.contract.functions.getAttestationRoot(root_key).call()

    def get_bid_rating(self, bid_id_: bytes):
        """getBidRating"""
        return self.contract.functions.getBidRating(bid_id_).call()

    def is_agent_active(self, agent_id_: bytes):
        """isAgentActive"""
        return self.contract.functions.isAgentActive(agent_id_).call()

    def is_agent_attestation_verified(self, agent_id: bytes):
        """isAgentAttestationVerified"""
        return self.contract.functions.isAgentAttestationVerified(agent_id).call()

    def is_agent_registered(self, agent_id_: bytes):
        """isAgentRegistered"""
        return self.contract.functions.isAgentRegistered(agent_id_).call()

    def is_bid_rated(self, bid_id_: bytes):
        """isBidRated"""
        return self.contract.functions.isBidRated(bid_id_).call()

    def is_serial_verified(self, serial: bytes):
        """isSerialVerified"""
        return self.contract.functions.isSerialVerified(serial).call()

    def register_agent(self, agent_id_: bytes, config_: 'AgentConfig', attestation_root_: bytes, proof_: list[bytes]):
        """registerAgent"""
        tx = self.contract.functions.registerAgent(agent_id_, config_, attestation_root_, proof_).transact()
        return tx

    def set_network(self, network: str):
        """setNetwork"""
        tx = self.contract.functions.setNetwork(network).transact()
        return tx

    def set_reputation_provider(self, agent_id_: bytes, provider_: str):
        """setReputationProvider"""
        tx = self.contract.functions.setReputationProvider(agent_id_, provider_).transact()
        return tx

    def submit_detailed_rating(self, bid_id_: bytes, agent_id_: bytes, score: int, comment: str, tags: list[int]):
        """submitDetailedRating"""
        tx = self.contract.functions.submitDetailedRating(bid_id_, agent_id_, score, comment, tags).transact()
        return tx

    def submit_rating(self, bid_id_: bytes, agent_id_: bytes, score: int, comment: str):
        """submitRating"""
        tx = self.contract.functions.submitRating(bid_id_, agent_id_, score, comment).transact()
        return tx

    def track_agent_attestation(self, agent_id_: bytes, attestation_root_: bytes, proof_: list[bytes]):
        """trackAgentAttestation"""
        tx = self.contract.functions.trackAgentAttestation(agent_id_, attestation_root_, proof_).transact()
        return tx

    def transfer_agent(self, agent_id_: bytes, new_owner_: str):
        """transferAgent"""
        tx = self.contract.functions.transferAgent(agent_id_, new_owner_).transact()
        return tx

    def update_agent(self, agent_id_: bytes, config_: 'AgentConfig'):
        """updateAgent"""
        tx = self.contract.functions.updateAgent(agent_id_, config_).transact()
        return tx

    def validate_and_track_attestation(self, agent_id: bytes, attestation_root: bytes, proof: list[bytes]):
        """validateAndTrackAttestation"""
        tx = self.contract.functions.validateAndTrackAttestation(agent_id, attestation_root, proof).transact()
        return tx
